"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeY = exports.computeD = void 0;
var bn_js_1 = __importDefault(require("bn.js"));
var ZERO = new bn_js_1.default(0);
var ONE = new bn_js_1.default(1);
var N_COINS = new bn_js_1.default(2); // n
/**
 * Compute the StableSwap invariant
 * @param ampFactor Amplification coefficient (A)
 * @param amountA Swap balance of token A
 * @param amountB Swap balance of token B
 * Reference: https://github.com/curvefi/curve-contract/blob/7116b4a261580813ef057887c5009e22473ddb7d/tests/simulation.py#L31
 */
exports.computeD = function (ampFactor, amountA, amountB) {
    var Ann = ampFactor.mul(N_COINS); // A*n^n
    var S = amountA.add(amountB); // sum(x_i), a.k.a S
    if (S.isZero()) {
        return S;
    }
    var dPrev = ZERO;
    var d = S;
    while (d.sub(dPrev).abs().gt(ONE)) {
        dPrev = d;
        var dP = d;
        dP = dP.mul(d).div(new bn_js_1.default(amountA.mul(N_COINS)));
        dP = dP.mul(d).div(new bn_js_1.default(amountB.mul(N_COINS)));
        var dNumerator = d.mul(new bn_js_1.default(Ann.mul(S).add(new bn_js_1.default(dP.mul(N_COINS)))));
        var dDenominator = d
            .mul(new bn_js_1.default(Ann.sub(ONE)))
            .add(dP.mul(new bn_js_1.default(N_COINS.add(ONE))));
        d = dNumerator.div(dDenominator);
    }
    return d;
};
/**
 * Compute Y amount in respect to X on the StableSwap curve
 * @param ampFactor Amplification coefficient (A)
 * @param x The quantity of underlying asset
 * @param d StableSwap invariant
 * Reference: https://github.com/curvefi/curve-contract/blob/7116b4a261580813ef057887c5009e22473ddb7d/tests/simulation.py#L55
 */
exports.computeY = function (ampFactor, x, d) {
    var Ann = ampFactor.mul(N_COINS); // A*n^n
    // sum' = prod' = x
    var b = x.add(d.div(Ann)).sub(d); // b = sum' - (A*n**n - 1) * D / (A * n**n)
    var c = d // c =  D ** (n + 1) / (n ** (2 * n) * prod' * A)
        .mul(d)
        .mul(d)
        .div(new bn_js_1.default(N_COINS.mul(N_COINS).mul(x).mul(Ann)));
    var yPrev = ZERO;
    var y = d;
    while (y.sub(yPrev).abs().gt(ONE)) {
        yPrev = y;
        y = y
            .mul(y)
            .add(c)
            .div(new bn_js_1.default(N_COINS.mul(y).add(b)));
    }
    return y;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsY3VsYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2NhbGN1bGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0RBQXVCO0FBRXZCLElBQU0sSUFBSSxHQUFHLElBQUksZUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLElBQU0sR0FBRyxHQUFHLElBQUksZUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLElBQU0sT0FBTyxHQUFHLElBQUksZUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSTtBQUUvQjs7Ozs7O0dBTUc7QUFDVSxRQUFBLFFBQVEsR0FBRyxVQUFDLFNBQWEsRUFBRSxPQUFXLEVBQUUsT0FBVztJQUM5RCxJQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUTtJQUM1QyxJQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsb0JBQW9CO0lBQ3BELElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ2QsT0FBTyxDQUFDLENBQUM7S0FDVjtJQUVELElBQUksS0FBSyxHQUFHLElBQUksQ0FBQztJQUNqQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ2pDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDVixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDWCxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakQsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksZUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWpELElBQU0sVUFBVSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFFLElBQU0sWUFBWSxHQUFHLENBQUM7YUFDbkIsR0FBRyxDQUFDLElBQUksZUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUN6QixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLGVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLENBQUMsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0tBQ2xDO0lBRUQsT0FBTyxDQUFDLENBQUM7QUFDWCxDQUFDLENBQUM7QUFFRjs7Ozs7O0dBTUc7QUFDVSxRQUFBLFFBQVEsR0FBRyxVQUFDLFNBQWEsRUFBRSxDQUFLLEVBQUUsQ0FBSztJQUNsRCxJQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUTtJQUM1QyxtQkFBbUI7SUFDbkIsSUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsMkNBQTJDO0lBQy9FLElBQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxpREFBaUQ7U0FDMUQsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNOLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDTixHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVyRCxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDakIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ1YsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNqQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsQ0FBQyxHQUFHLENBQUM7YUFDRixHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ04sR0FBRyxDQUFDLENBQUMsQ0FBQzthQUNOLEdBQUcsQ0FBQyxJQUFJLGVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDdkM7SUFFRCxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCTiBmcm9tIFwiYm4uanNcIjtcblxuY29uc3QgWkVSTyA9IG5ldyBCTigwKTtcbmNvbnN0IE9ORSA9IG5ldyBCTigxKTtcbmNvbnN0IE5fQ09JTlMgPSBuZXcgQk4oMik7IC8vIG5cblxuLyoqXG4gKiBDb21wdXRlIHRoZSBTdGFibGVTd2FwIGludmFyaWFudFxuICogQHBhcmFtIGFtcEZhY3RvciBBbXBsaWZpY2F0aW9uIGNvZWZmaWNpZW50IChBKVxuICogQHBhcmFtIGFtb3VudEEgU3dhcCBiYWxhbmNlIG9mIHRva2VuIEFcbiAqIEBwYXJhbSBhbW91bnRCIFN3YXAgYmFsYW5jZSBvZiB0b2tlbiBCXG4gKiBSZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9jdXJ2ZWZpL2N1cnZlLWNvbnRyYWN0L2Jsb2IvNzExNmI0YTI2MTU4MDgxM2VmMDU3ODg3YzUwMDllMjI0NzNkZGI3ZC90ZXN0cy9zaW11bGF0aW9uLnB5I0wzMVxuICovXG5leHBvcnQgY29uc3QgY29tcHV0ZUQgPSAoYW1wRmFjdG9yOiBCTiwgYW1vdW50QTogQk4sIGFtb3VudEI6IEJOKTogQk4gPT4ge1xuICBjb25zdCBBbm4gPSBhbXBGYWN0b3IubXVsKE5fQ09JTlMpOyAvLyBBKm5eblxuICBjb25zdCBTID0gYW1vdW50QS5hZGQoYW1vdW50Qik7IC8vIHN1bSh4X2kpLCBhLmsuYSBTXG4gIGlmIChTLmlzWmVybygpKSB7XG4gICAgcmV0dXJuIFM7XG4gIH1cblxuICBsZXQgZFByZXYgPSBaRVJPO1xuICBsZXQgZCA9IFM7XG4gIHdoaWxlIChkLnN1YihkUHJldikuYWJzKCkuZ3QoT05FKSkge1xuICAgIGRQcmV2ID0gZDtcbiAgICBsZXQgZFAgPSBkO1xuICAgIGRQID0gZFAubXVsKGQpLmRpdihuZXcgQk4oYW1vdW50QS5tdWwoTl9DT0lOUykpKTtcbiAgICBkUCA9IGRQLm11bChkKS5kaXYobmV3IEJOKGFtb3VudEIubXVsKE5fQ09JTlMpKSk7XG5cbiAgICBjb25zdCBkTnVtZXJhdG9yID0gZC5tdWwobmV3IEJOKEFubi5tdWwoUykuYWRkKG5ldyBCTihkUC5tdWwoTl9DT0lOUykpKSkpO1xuICAgIGNvbnN0IGREZW5vbWluYXRvciA9IGRcbiAgICAgIC5tdWwobmV3IEJOKEFubi5zdWIoT05FKSkpXG4gICAgICAuYWRkKGRQLm11bChuZXcgQk4oTl9DT0lOUy5hZGQoT05FKSkpKTtcbiAgICBkID0gZE51bWVyYXRvci5kaXYoZERlbm9taW5hdG9yKTtcbiAgfVxuXG4gIHJldHVybiBkO1xufTtcblxuLyoqXG4gKiBDb21wdXRlIFkgYW1vdW50IGluIHJlc3BlY3QgdG8gWCBvbiB0aGUgU3RhYmxlU3dhcCBjdXJ2ZVxuICogQHBhcmFtIGFtcEZhY3RvciBBbXBsaWZpY2F0aW9uIGNvZWZmaWNpZW50IChBKVxuICogQHBhcmFtIHggVGhlIHF1YW50aXR5IG9mIHVuZGVybHlpbmcgYXNzZXRcbiAqIEBwYXJhbSBkIFN0YWJsZVN3YXAgaW52YXJpYW50XG4gKiBSZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9jdXJ2ZWZpL2N1cnZlLWNvbnRyYWN0L2Jsb2IvNzExNmI0YTI2MTU4MDgxM2VmMDU3ODg3YzUwMDllMjI0NzNkZGI3ZC90ZXN0cy9zaW11bGF0aW9uLnB5I0w1NVxuICovXG5leHBvcnQgY29uc3QgY29tcHV0ZVkgPSAoYW1wRmFjdG9yOiBCTiwgeDogQk4sIGQ6IEJOKTogQk4gPT4ge1xuICBjb25zdCBBbm4gPSBhbXBGYWN0b3IubXVsKE5fQ09JTlMpOyAvLyBBKm5eblxuICAvLyBzdW0nID0gcHJvZCcgPSB4XG4gIGNvbnN0IGIgPSB4LmFkZChkLmRpdihBbm4pKS5zdWIoZCk7IC8vIGIgPSBzdW0nIC0gKEEqbioqbiAtIDEpICogRCAvIChBICogbioqbilcbiAgY29uc3QgYyA9IGQgLy8gYyA9ICBEICoqIChuICsgMSkgLyAobiAqKiAoMiAqIG4pICogcHJvZCcgKiBBKVxuICAgIC5tdWwoZClcbiAgICAubXVsKGQpXG4gICAgLmRpdihuZXcgQk4oTl9DT0lOUy5tdWwoTl9DT0lOUykubXVsKHgpLm11bChBbm4pKSk7XG5cbiAgbGV0IHlQcmV2ID0gWkVSTztcbiAgbGV0IHkgPSBkO1xuICB3aGlsZSAoeS5zdWIoeVByZXYpLmFicygpLmd0KE9ORSkpIHtcbiAgICB5UHJldiA9IHk7XG4gICAgeSA9IHlcbiAgICAgIC5tdWwoeSlcbiAgICAgIC5hZGQoYylcbiAgICAgIC5kaXYobmV3IEJOKE5fQ09JTlMubXVsKHkpLmFkZChiKSkpO1xuICB9XG5cbiAgcmV0dXJuIHk7XG59O1xuIl19