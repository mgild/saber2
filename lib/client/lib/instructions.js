"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withdrawInstruction = exports.depositInstruction = exports.swapInstruction = exports.createInitSwapInstruction = void 0;
var BufferLayout = __importStar(require("buffer-layout"));
var web3_js_1 = require("@solana/web3.js");
var u64_1 = require("./util/u64");
var layout_1 = require("./layout");
exports.createInitSwapInstruction = function (tokenSwapAccount, authority, adminAccount, adminFeeAccountA, adminFeeAccountB, tokenMintA, tokenAccountA, tokenMintB, tokenAccountB, poolTokenMint, poolTokenAccount, swapProgramId, tokenProgramId, nonce, ampFactor, fees) {
    var keys = [
        { pubkey: tokenSwapAccount.publicKey, isSigner: false, isWritable: true },
        { pubkey: authority, isSigner: false, isWritable: false },
        { pubkey: adminAccount, isSigner: false, isWritable: false },
        { pubkey: adminFeeAccountA, isSigner: false, isWritable: false },
        { pubkey: adminFeeAccountB, isSigner: false, isWritable: false },
        { pubkey: tokenMintA, isSigner: false, isWritable: false },
        { pubkey: tokenAccountA, isSigner: false, isWritable: false },
        { pubkey: tokenMintB, isSigner: false, isWritable: false },
        { pubkey: tokenAccountB, isSigner: false, isWritable: false },
        { pubkey: poolTokenMint, isSigner: false, isWritable: true },
        { pubkey: poolTokenAccount, isSigner: false, isWritable: true },
        { pubkey: tokenProgramId, isSigner: false, isWritable: false },
    ];
    var dataLayout = BufferLayout.struct([
        BufferLayout.u8("instruction"),
        BufferLayout.u8("nonce"),
        layout_1.Uint64Layout("ampFactor"),
        layout_1.Uint64Layout("adminTradeFeeNumerator"),
        layout_1.Uint64Layout("adminTradeFeeDenominator"),
        layout_1.Uint64Layout("adminWithdrawFeeNumerator"),
        layout_1.Uint64Layout("adminWithdrawFeeDenominator"),
        layout_1.Uint64Layout("tradeFeeNumerator"),
        layout_1.Uint64Layout("tradeFeeDenominator"),
        layout_1.Uint64Layout("withdrawFeeNumerator"),
        layout_1.Uint64Layout("withdrawFeeDenominator"),
    ]);
    var data = Buffer.alloc(dataLayout.span);
    {
        var encodeLength = dataLayout.encode({
            instruction: 0,
            nonce: nonce,
            ampFactor: new u64_1.NumberU64(ampFactor).toBuffer(),
            adminTradeFeeNumerator: new u64_1.NumberU64(fees.adminTradeFeeNumerator).toBuffer(),
            adminTradeFeeDenominator: new u64_1.NumberU64(fees.adminTradeFeeDenominator).toBuffer(),
            adminWithdrawFeeNumerator: new u64_1.NumberU64(fees.adminWithdrawFeeNumerator).toBuffer(),
            adminWithdrawFeeDenominator: new u64_1.NumberU64(fees.adminWithdrawFeeDenominator).toBuffer(),
            tradeFeeNumerator: new u64_1.NumberU64(fees.tradeFeeNumerator).toBuffer(),
            tradeFeeDenominator: new u64_1.NumberU64(fees.tradeFeeDenominator).toBuffer(),
            withdrawFeeNumerator: new u64_1.NumberU64(fees.withdrawFeeNumerator).toBuffer(),
            withdrawFeeDenominator: new u64_1.NumberU64(fees.withdrawFeeDenominator).toBuffer(),
        }, data);
        data = data.slice(0, encodeLength);
    }
    return new web3_js_1.TransactionInstruction({
        keys: keys,
        programId: swapProgramId,
        data: data,
    });
};
exports.swapInstruction = function (tokenSwap, authority, userSource, poolSource, poolDestination, userDestination, adminDestination, swapProgramId, tokenProgramId, amountIn, minimumAmountOut) {
    var dataLayout = BufferLayout.struct([
        BufferLayout.u8("instruction"),
        layout_1.Uint64Layout("amountIn"),
        layout_1.Uint64Layout("minimumAmountOut"),
    ]);
    var data = Buffer.alloc(dataLayout.span);
    dataLayout.encode({
        instruction: 1,
        amountIn: new u64_1.NumberU64(amountIn).toBuffer(),
        minimumAmountOut: new u64_1.NumberU64(minimumAmountOut).toBuffer(),
    }, data);
    var keys = [
        { pubkey: tokenSwap, isSigner: false, isWritable: false },
        { pubkey: authority, isSigner: false, isWritable: false },
        { pubkey: userSource, isSigner: false, isWritable: true },
        { pubkey: poolSource, isSigner: false, isWritable: true },
        { pubkey: poolDestination, isSigner: false, isWritable: true },
        { pubkey: userDestination, isSigner: false, isWritable: true },
        { pubkey: adminDestination, isSigner: false, isWritable: true },
        { pubkey: tokenProgramId, isSigner: false, isWritable: false },
        { pubkey: web3_js_1.SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },
    ];
    return new web3_js_1.TransactionInstruction({
        keys: keys,
        programId: swapProgramId,
        data: data,
    });
};
exports.depositInstruction = function (tokenSwap, authority, sourceA, sourceB, intoA, intoB, poolTokenMint, poolTokenAccount, swapProgramId, tokenProgramId, tokenAmountA, tokenAmountB, minimumPoolTokenAmount) {
    var dataLayout = BufferLayout.struct([
        BufferLayout.u8("instruction"),
        layout_1.Uint64Layout("tokenAmountA"),
        layout_1.Uint64Layout("tokenAmountB"),
        layout_1.Uint64Layout("minimumPoolTokenAmount"),
    ]);
    var data = Buffer.alloc(dataLayout.span);
    dataLayout.encode({
        instruction: 2,
        tokenAmountA: new u64_1.NumberU64(tokenAmountA).toBuffer(),
        tokenAmountB: new u64_1.NumberU64(tokenAmountB).toBuffer(),
        minimumPoolTokenAmount: new u64_1.NumberU64(minimumPoolTokenAmount).toBuffer(),
    }, data);
    var keys = [
        { pubkey: tokenSwap, isSigner: false, isWritable: false },
        { pubkey: authority, isSigner: false, isWritable: false },
        { pubkey: sourceA, isSigner: false, isWritable: true },
        { pubkey: sourceB, isSigner: false, isWritable: true },
        { pubkey: intoA, isSigner: false, isWritable: true },
        { pubkey: intoB, isSigner: false, isWritable: true },
        { pubkey: poolTokenMint, isSigner: false, isWritable: true },
        { pubkey: poolTokenAccount, isSigner: false, isWritable: true },
        { pubkey: tokenProgramId, isSigner: false, isWritable: false },
        { pubkey: web3_js_1.SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },
    ];
    return new web3_js_1.TransactionInstruction({
        keys: keys,
        programId: swapProgramId,
        data: data,
    });
};
exports.withdrawInstruction = function (tokenSwap, authority, poolMint, sourcePoolAccount, fromA, fromB, userAccountA, userAccountB, adminFeeAccountA, adminFeeAccountB, swapProgramId, tokenProgramId, poolTokenAmount, minimumTokenA, minimumTokenB) {
    var dataLayout = BufferLayout.struct([
        BufferLayout.u8("instruction"),
        layout_1.Uint64Layout("poolTokenAmount"),
        layout_1.Uint64Layout("minimumTokenA"),
        layout_1.Uint64Layout("minimumTokenB"),
    ]);
    var data = Buffer.alloc(dataLayout.span);
    dataLayout.encode({
        instruction: 3,
        poolTokenAmount: new u64_1.NumberU64(poolTokenAmount).toBuffer(),
        minimumTokenA: new u64_1.NumberU64(minimumTokenA).toBuffer(),
        minimumTokenB: new u64_1.NumberU64(minimumTokenB).toBuffer(),
    }, data);
    var keys = [
        { pubkey: tokenSwap, isSigner: false, isWritable: false },
        { pubkey: authority, isSigner: false, isWritable: false },
        { pubkey: poolMint, isSigner: false, isWritable: true },
        { pubkey: sourcePoolAccount, isSigner: false, isWritable: true },
        { pubkey: fromA, isSigner: false, isWritable: true },
        { pubkey: fromB, isSigner: false, isWritable: true },
        { pubkey: userAccountA, isSigner: false, isWritable: true },
        { pubkey: userAccountB, isSigner: false, isWritable: true },
        { pubkey: adminFeeAccountA, isSigner: false, isWritable: true },
        { pubkey: adminFeeAccountB, isSigner: false, isWritable: true },
        { pubkey: tokenProgramId, isSigner: false, isWritable: false },
    ];
    return new web3_js_1.TransactionInstruction({
        keys: keys,
        programId: swapProgramId,
        data: data,
    });
};
//# sourceMappingURL=data:application/json;base64,